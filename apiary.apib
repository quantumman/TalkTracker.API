FORMAT: 1A
HOST: http://localhost:8080/api/v1/

# TalkTracker API

TalkTracker is a simple API allowing consumers to access resources of TalkTracker.

## Data Structures

### Project (object)
+ id: 43 (number, required)
+ name: Test Project (string, required)
+ description: This is test project (string)
+ created_at: `2015-08-05T08:40:51.620Z` (string, required)
+ updated_at: `2015-08-05T08:40:51.620Z` (string, required)
+ activity_url: http://localhost:8080/api/v1/projects/43/activities (string, required)
+ messages_url: http://localhost:8080/api/v1/projects/43/messages (string, required)
+ tasks_url: http://localhost:8080/api/v1/projects/43/tasks (string, required)
+ settings_url: http://localhost:8080/api/v1/projects/43/settings (string, required)
+ events_url: http://localhost:8080/api/v1/projects/43/events (string, required)

### Project Post (object)
+ name: New project (string, required)
+ description: This is test project

### Project Event (object)
+ actor (User, required)
+ event (enum[string])
    + Members
        + closed
        + reopend
        + referenced
        + tagged
        + untagged
        + renamed
        + task_connected
        + task_unconnected
+ creatd_on: `2015-08-05T08:40:51.620Z` (string, required)

### Message (object)
+ id: 10 (number, required)
+ title: adjald (string, required)
+ body: hoge (string, required)
+ number: 10012 (string, required)
+ state: open (string, required)
+ creator (User)
+ created_at: `2015-08-05T08:40:51.620Z` (string, required)
+ instance: http://localhost:8080/api/v1/projects/43/messages/10
+ comments_url: http://localhost:8080/api/v1/projects/43/messages/10/comments (string, required)

### Message Post (object)
+ title: afgfgsfd (string, required)
+ body: hoge (string, required)

### Message Patch (object)
+ title: afgfgsfd (string)
+ body: hoge (string)
+ state: open (string)

### Comment (object)
+ id: 234123 (number)
+ body: hogefaasdfl (string, required)
+ creator (User, required)
+ created_at: `2015-08-05T08:40:51.620Z` (string, required)
+ updated_at: `2015-08-05T08:40:51.620Z` (string, required)

### Comment Post (object)
+ body: foobar (string, required)
+ created_at: `2015-08-05T08:40:51.620Z` (string, required)
+ updated_at: `2015-08-05T08:40:51.620Z` (string, required)

### Task (object)mmy
+ id: 234234 (number)
+ title: todo something (string, required)
+ body: do something (string, required)
+ assignee (User, required)
+ start_date: `2015-07-01` (string)
+ end_date: `2015-08-05` (string)
+ created_at: `2015-08-05T08:40:51.620Z` (string, required)
+ updated_at: `2015-08-05T08:40:51.620Z` (string, required)

### Task Post (object)
+ title: todo something (string, required)
+ body: do something (string)
+ assignee: 13224 (number)
+ start_date: `2015-07-01` (string)
+ end_date: `2015-08-05` (string)

### User (object)
+ id: 2324 (number, required)
+ name: Mr. foobar (string, required)
+ email: hoge@test.co.jp (string, required)
+ avatar: https://hoge.avatar.co.jp/hoge.img (string, required)


# Group Authentication

## Login [/sessions]

### Login [POST]
+ Relation: create
+ Request (application/json)
    + Attributes
        + username (string, required)
        + password (string, required)
+ Response 302
    + Headers

            Location: http://localhost:8080/?/

## Authenticated User [/user]

### Get a Current User [GET]
+ Relation: instance
+ Response 200 (application/json)
    + Attributes (User)


# Group Project

## Project Collection [/projects]

### List All Projects [GET]
+ Relation: self
+ Response 200 (application/json)
    + Attributes (array[Project])

### Create a New Project [POST]
+ Relation: create
+ Request (application/json)
    + Attributes (Project Post)

+ Response 201 (application/json)
    + Attributes (Project)


## Project [/projects/{id}]

+ Parameters
    + id (number, required)

### Delete a Project [DELETE]
+ Relation: destroy
+ Response 204

## Event Collection [/projects/{id}/events{?page}]

+ Parameters
    + id (number, required)
    + page (number, optional)

### List Events [GET]
+ Relation: self
+ Response 200 (application/json)
    + Attributes (array[Project Event])


# Group Message

## Message Collection [/projects/{project_id}/messages{?page,sort,state}]

+ Parameters
    + project_id (number, required)

### List All Messages [GET]
+ Relation: self

+ Parameters
    + page (number, optional) - Number of page
    + sort (enum[string], optional)
        Order of returned messages
        + Members
            + created
            + updated

+ Response 200 (application/json)
  + Headers

            Link: <http://localhost:8080/api/v1/projects/43/messages?page=1>; rel="prev", <http://localhost:8080/api/v1/projects/43/messages?page=2>; rel="next", <http://localhost:8080/api/v1/projects/43/messages?page=10>; rel="last"

  + Attributes (array[Message])


### Create a New Message [POST]
+ Relation: create
+ Request (application/json)
    + Attributes (Message Post)
+ Response 201 (application/json)
    + Attributes (Message)



## Message [/projects/{project_id}/messages/{id}]

+ Parameters
    + id (number, required)
    + project_id (number, required)

### Retrieve a Message [GET]
+ Relation: instance
+ Response 200 (appliation/json)
    + Attribute (Message)

### Update a Message [PATCH]
+ Relation: update
+ Request (application/json)
    + Attributes (Message Patch)
+ Response 200 (application/json)
    + Attributes (Message)


# Group Comment

## Comment Collection [/projects/{project_id}/messages/{message_id}/comments{?since}]

+ Parameters
    + project_id (number, required)
    + message_id (number, required)

### List All Comments [GET]
+ Relation: self

+ Parameters
    + since: `2015-08-05T08:40:51.620Z` (string, optional)

+ Response 200 (application/json)
    + Attributes (array[Comment])
    
    + Body
    
            [
                {
                    "id": 234123,
                    "body": "hogefaasdfl",
                    "creator": {
                        "id": 2324,
                        "name": "Mr. foobar",
                        "email": "hoge@test.co.jp",
                        "avatar": "https://hoge.avatar.co.jp/hoge.img"
                    },
                    "created_at": "2015-08-05T08:40:51.620Z",
                    "updated_at": "2015-08-05T08:40:51.620Z"
                },
                {
                    "id": 234123,
                    "body": "hogefaasdfl",
                    "creator": {
                        "id": 2324,
                        "name": "Mr. foobar",
                        "email": "hoge@test.co.jp",
                        "avatar": "https://hoge.avatar.co.jp/hoge.img"
                    },
                    "created_at": "2015-08-05T08:40:51.620Z",
                    "updated_at": "2015-08-05T08:40:51.620Z"
                },
                {
                    "id": 234123,
                    "body": "hogefaasdfl",
                    "creator": {
                        "id": 2324,
                        "name": "Mr. foobar",
                        "email": "hoge@test.co.jp",
                        "avatar": "https://hoge.avatar.co.jp/hoge.img"
                    },
                    "created_at": "2015-08-05T08:40:51.620Z",
                    "updated_at": "2015-08-05T08:40:51.620Z"
                },
                {
                    "id": 234123,
                    "body": "hogefaasdfl",
                    "creator": {
                        "id": 2324,
                        "name": "Mr. foobar",
                        "email": "hoge@test.co.jp",
                        "avatar": "https://hoge.avatar.co.jp/hoge.img"
                    },
                    "created_at": "2015-08-05T08:40:51.620Z",
                    "updated_at": "2015-08-05T08:40:51.620Z"
                }
            ]

### Create a New Comment [POST]
+ Relation: create
+ Request (application/json)
    + Attributes (Comment Post)

+ Response 201 (application/json)
    + Attributes (Comment)

## Comment [/projects/{project_id}/messages/{message_id}/comments/{id}]

+ Parameters
    + id (number, required)
    + project_id (number, required)
    + message_id (number, required)


### Get a Comment [GET]
+ Relation: instance
+ Response 200 (appliation/json)
    + Attributes (Comment)

### Update a Comment [PATCH]
+ Relation: update
+ Request (application/json)
    + Attributes
        + body: foalfajsdlf (string)
+ Response 200 (appliaction/json)
    + Attributes (Comment)

### Delete a Comment [DELETE]
+ Relation: destroy
+ Response 204 (application/json)


# Group Task

## Task Collection [/projects/{project_id}/tasks]

+ Parameters
    + project_id (number, required)

### List All Tasks [GET]
+ Relation: self
+ Response 200 (application/json)
    + Attributes (array[Task])

### Create a New Task [POST]
+ Relation: create
+ Request (application/json)
    + Attributes (Task Post)
+ Response 201 (application/json)
    + Attributes (Task)


## Task [/projects/{project_id}/tasks/{id}]

+ Parameters
    + id (number, required)
    + project_id (number, required)

### Get a Task [GET]
+ Relation: instance
+ Response 200 (application/json)
    + Attributes (Task)

### Update a Task [PATCH]
+ Relation: update
+ Request (application/json)
    + Attributes (Task Post)
+ Response 200 (application/json)
    + Attributes (Task)

### Delete a Task [DELETE]
+ Relation: destroy
+ Response 204